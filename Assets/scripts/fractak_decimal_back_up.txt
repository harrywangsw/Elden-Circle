//circle object has radius of 1
    public GameObject circle_object, zooming_object;
    public decimal radius_range = 19M, min_radius = 0.02M, expand_period = 1.1M, min_change;
    //circle_list's positions are not shifted/scaled by zooming_object
    public List<circle> circle_list;
    //object_list keeps track of the objects' shifted positions
    public List<GameObject> object_list; 
    public circle smallest;
    public Vector2 amount_shifted;
    public List<Tuple<GameObject, GameObject, GameObject>> break_point = new List<Tuple<GameObject, GameObject, GameObject>>();
    void Start()
    {
        circle_list = new List<circle>();
        object_list = new List<GameObject>();
        generate_first_three();
        generate_apollo(object_list[0], object_list[1], object_list[2]);
        StartCoroutine(expand());
    }

    IEnumerator expand(){
        decimal zooming_object_size;
        int i, j = 0;
        while(true){
            for(i=0; i<object_list.Count; i++){
                if(!object_list[i]){
                    object_list.RemoveAt(i);
                    circle_list.RemoveAt(i);
                    continue;
                }
                
                //move each circle so that the smallest circle is aligned with the center of the camera
                //Debug.Log(circle_list[i].pos.ToString()+" "+smallest.pos.ToString());
                object_list[i].transform.position=(Vector3)(circle_list[i].pos-smallest.pos);
                //because the circles's positions are calculated as if zooming_object has to stretch, 
                //we must multiply all distance by the scale
                object_list[i].transform.position*=zooming_object.transform.localScale.x;
                //object_list[i].GetComponent<SpriteRenderer>().enabled = true;
            }

            Vector3 final_size = zooming_object.transform.localScale*(float)expand_period;
            yield return StartCoroutine(statics.expand(zooming_object.transform, (float)expand_period/2.8f, final_size));
            //min_radius/=expand_period;

            //to prevent the radius of the circles from getting too small:
            //First, shrink zooming_object and all the circles to the original size
            //then, de-parent all the circles, enlarge them, and move them to the correct spot to look like as if nothing's changed
            //add the circles back to the zooming_object to start another zooming cycle with the min_rad unchanged
            zooming_object_size = (decimal)zooming_object.transform.localScale.x;
            zooming_object.transform.localScale = Vector3.one;
            for(i=0; i<object_list.Count; i++){
                if(!object_list[i]){
                    object_list.RemoveAt(i);
                    circle_list.RemoveAt(i);
                    continue;
                }
                object_list[i].transform.SetParent(null);
                object_list[i].transform.position*=(float)zooming_object_size;
                object_list[i].transform.localScale *= (float)zooming_object_size;
                // if(object_list[i].transform.localScale.x>=99999999f){
                //     Destroy(object_list[i]);
                //     object_list.RemoveAt(i);
                //     circle_list.RemoveAt(i);
                //     yield break;
                // }
                //now that the radius and position of the circle objects have been "reset" as if they haven't been stretched, 
                //change the circle objects in circle_list to match the objects
                circle_list[i].pos=(Vector2)object_list[i].transform.position;
                circle_list[i].r = (decimal)object_list[i].transform.localScale.x;
                object_list[i].transform.SetParent(zooming_object.transform);
            }

            List<Tuple<GameObject, GameObject, GameObject>> break_point_cpy = break_point;
            break_point = new List<Tuple<GameObject, GameObject, GameObject>>();
            foreach(Tuple<GameObject, GameObject, GameObject> triplet in break_point_cpy){
                if(!triplet.Item1||!triplet.Item2||!triplet.Item3){
                    Debug.Log("destroyed circle");
                    continue;
                }
                generate_apollo(triplet.Item1, triplet.Item2, triplet.Item3);
            }
        }
    }

    void generate_apollo(GameObject object_1, GameObject object_2, GameObject object_3){
        circle tangent_1 = new circle((decimal)object_1.transform.localScale.x, (Vector2)object_1.transform.position);
        circle tangent_2 = new circle((decimal)object_2.transform.localScale.x, (Vector2)object_2.transform.position);
        circle tangent_3 = new circle((decimal)object_3.transform.localScale.x, (Vector2)object_3.transform.position);
        circle new_circle = generate_next_circle(tangent_1, tangent_2, tangent_3);
        if(new_circle.r<=min_radius) {
            // GameObject c1 = Instantiate(circle_object, tangent_1.pos, Quaternion.identity);
            // c1.transform.localScale = tangent_1.r*Vector3.one;
            // GameObject c2 = Instantiate(circle_object, tangent_2.pos, Quaternion.identity);
            // c2.transform.localScale = tangent_2.r*Vector3.one;
            // GameObject c3 = Instantiate(circle_object, tangent_3.pos, Quaternion.identity);
            // c3.transform.localScale = tangent_3.r*Vector3.one;
            break_point.Add(Tuple.Create(object_1, object_2, object_3));
            //get the circle that requires the least shifting for the entire fractal
            //if(min_change>(new_circle.pos-amount_shifted).magnitude) smallest = new_circle;
            smallest = new_circle;
            return;
        }
        GameObject new_object = spawn_circle_object(new_circle);
        //Debug.Log(new_circle.r.ToString());
        generate_apollo(new_object, object_1, object_2);
        generate_apollo(object_1, object_3, new_object);
        generate_apollo(object_2, object_3, new_object);
        
        return;
    }

    public circle generate_next_circle(circle fst, circle snd, circle trd){
        decimal k_1 = 1/fst.r;
        decimal k_2 = 1/snd.r;
        decimal k_3 = 1/trd.r;
        decimal rad = 1/(k_1+k_2+k_3+2M*(decimal)Math.Sqrt((double)(k_1*k_2+k_2*k_3+k_1*k_3)));
        // if(Mathf.Abs(1f/(k_1+k_2+k_3-2f*Mathf.Sqrt(k_1*k_2+k_2*k_3+k_1*k_3)))<rad&&1f/(k_1+k_2+k_3-2f*Mathf.Sqrt(k_1*k_2+k_2*k_3+k_1*k_3))>0f){
        //     Debug.Log("really?");
        //     rad = 1f/(k_1+k_2+k_3-2f*Mathf.Sqrt(k_1*k_2+k_2*k_3+k_1*k_3));
        // }

        Vector2 pos1 = intersection_of_two_circles(new circle(fst.r+rad, fst.pos), new circle(snd.r+rad, snd.pos));
        Vector2 pos2 = intersection_of_two_circles(new circle(fst.r+rad, fst.pos), new circle(snd.r+rad, snd.pos), -1);
        // if(decimal.IsNaN(pos1.x)||decimal.IsNaN(pos2.y)){
        //     //Debug.Log(fst.pos.ToString()+fst.r.ToString()+" "+snd.pos.ToString()+snd.r.ToString()+" "+trd.pos.ToString()+trd.r.ToString());
        // }

        if((pos1-trd.pos).magnitude<(pos2-trd.pos).magnitude){
            return new circle(rad, pos1);
        }
        else{
            return new circle(rad, pos2);
        }
        // else if(tangent4(fst, snd, trd, new circle(rad, pos2))){
        //     return new circle(rad, pos2);
        // }

        // if(tangent4(fst, snd, trd, new circle(rad, pos1))){
        //     return new circle(rad, pos1);
        // }
        // else if(tangent4(fst, snd, trd, new circle(rad, pos2))){
        //     return new circle(rad, pos2);
        // }
        spawn_circle_object(fst, true);
        spawn_circle_object(snd, true);
        spawn_circle_object(trd, true);
        spawn_circle_object(new circle(rad, pos2), true);
        spawn_circle_object(new circle(rad, pos1), true);
        //Debug.Log("none??");
        return null;
    }

    // bool tangent4(circle a, circle b, circle c, circle d){
    //     return (isexternalTangent(a, b, d)&&isexternalTangent(c, b, d)&&isexternalTangent(a, c, d));
    // }

    // bool isexternalTangent(circle a, circle b, circle c){
    //     if(Math.Abs((a.pos-b.pos).magnitude-(a.r+b.r))>0.1f) return false;
    //     if(Math.Abs((a.pos-c.pos).magnitude-(a.r+c.r))>0.1f) return false;
    //     if(Math.Abs((b.pos-c.pos).magnitude-(b.r+c.r))>0.1f) return false;
    //     return true;
    // }

    void generate_first_three(){
        decimal rad = (decimal)Random.Range((float)radius_range, (float)radius_range*2);
        circle fir = new circle(rad, new Vector2(0f, 0f));
        decimal snd_rad = (decimal)Random.Range((float)radius_range, (float)radius_range*2);
        decimal angle = (decimal)Random.Range(0f, 2f*Mathf.PI);
        Vector2 snd_pos = new Vector2((float)(snd_rad+rad)*Mathf.Cos((float)angle), (float)(snd_rad+rad)*Mathf.Sin((float)angle));
        circle snd = new circle(snd_rad, snd_pos);
        decimal trd_rad = (decimal)Random.Range((float)radius_range, 2f*(float)radius_range);
        Vector2 trd_pos = intersection_of_two_circles(new circle(fir.r+trd_rad, fir.pos), new circle(snd.r+trd_rad, snd.pos));
        circle trd = new circle(trd_rad, trd_pos);
        spawn_circle_object(fir);
        spawn_circle_object(snd);
        spawn_circle_object(trd);
    }

    public Vector2 intersection_of_two_circles(circle one, circle two, int pos_neg = 1){
        decimal dist_between = (decimal)(one.pos-two.pos).magnitude;
        decimal angle_from_one = (decimal)Mathf.Acos((float)((two.r*two.r-dist_between*dist_between-one.r*one.r)/(-2M*one.r*dist_between)));
        angle_from_one*=pos_neg;
        angle_from_one += (decimal)(Mathf.PI*Vector2.SignedAngle(Vector2.right, (two.pos-one.pos))/180f);
        Vector2 wtf = new Vector2((float)((decimal)one.pos.x+one.r*(decimal)Mathf.Cos((float)angle_from_one)), (float)((decimal)one.pos.y+one.r*(decimal)Mathf.Sin((float)angle_from_one)));
        //Debug.Log(angle_from_one);
        return wtf;
    }

    public GameObject spawn_circle_object(circle c, bool painted = false){
        //spawn the circle in world space first and then move it to the zoom_object's position
        GameObject spawned_c = GameObject.Instantiate(circle_object, (c.pos), Quaternion.identity);
        spawned_c.transform.localScale = (float)c.r*Vector3.one;
        spawned_c.transform.SetParent(zooming_object.transform);
        circle_list.Add(c);
        object_list.Add(spawned_c);
        spawned_c.GetComponent<destroycircles>().c = c;
        if(painted) spawned_c.GetComponent<SpriteRenderer>().color = Color.blue;
        return spawned_c;
    }